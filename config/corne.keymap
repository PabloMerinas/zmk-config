/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;  // Tiempo que detecta si es hold o tap
            quick-tap-ms = <0>;
            flavor = "balanced";      // Equilibrio entre tap y hold
            bindings = <&kp>, <&kp>;
        };
        uenye: unicode_input {
            compatible = "zmk,behavior-unicode";
            label = "U_ENYE";
            unicode-map = <&unicode_map enye>;
        };

    };
    unicode_map {
        compatible = "zmk,unicode-map";

        entries {
            enye: unicode_entry {
                code = <0x00F1>;
            };
        };
    };
    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // | TAB  |  Q  |  W  |  E  |  R  |    T    |   |  Y  |  U   |  I  |  O  |  P  | ESC  |
            // | CTRL |  A  |  S  |  D  |  F  |    G    |   |  H  |  J   |  K  |  L  |  ;  : |  LWR/' " |
            // | SHFT |  Z  |  X  |  C  |  V  |    B    |   |  N  |  M   |  ,  < |  .  > |  /  ? | ALT  |
            //                    | GUI | LWR | ALT/ENT |   | SPACE | BKSP | RSE  |

            bindings = <
&kp TAB           &uenye &kp W  &kp E     &kp R  &kp T           &kp Y      &kp U     &kp I      &kp O    &kp P     &kp ESC
&kp LEFT_SHIFT    &kp A  &kp S  &kp D     &kp F  &kp G           &kp H      &kp J     &kp K      &kp L    &kp SEMI  &lt 1 SQT
&kp LEFT_CONTROL  &kp Z  &kp X  &kp C     &kp V  &kp B           &kp N      &kp M     &kp COMMA  &kp DOT  &kp FSLH  &kp DEL
                                &kp LGUI  &mo 1  &tp LALT RET    &kp SPACE  &kp BSPC  &mo 2
            >;
        };

        layer_below {
            // -----------------------------------------------------------------------------------------
            // |      |  !  |  @  |  #  |  $  |    %     |   |  ^  |  &  |  *  |  (  |  )  |   \   |
            // |      |  1  |  2  |  3  |  4  |    5     |   |  -  |  =  |  `  |  [  |  ]  |  "|"  |
            // | SHFT |  6  |  7  |  8  |  9  |    0     |   |  _  |  +  |  ~  |  {  |  }  | ALT |
            //                     | GUI |     | ALT/ENT |   | HYPER/SPACE | BKSP |    |

            bindings = <
&trans  &kp EXCLAMATION  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp BSLH
&trans  &kp N1           &kp N2  &kp N3    &kp N4    &kp N5       &kp MINUS  &kp EQUAL  &kp GRAVE        &kp LBKT  &kp RBKT  &kp PIPE
&trans  &kp N6           &kp N7  &kp N8    &kp N9    &kp N0       &kp UNDER  &kp PLUS   &kp TILDE        &kp LBRC  &kp RBRC  &trans
                                 &trans    &trans    &trans       &trans     &trans     &trans
            >;
        };

        layer_above {
            // -----------------------------------------------------------------------------------------
            // |       |  F1  |  F2  |  F3  |  F4  |  F5 |            |  F6  |  F7  |  F8  |  F9  |  F10  |   |
            // |       | Prev | Next | Vol - | Vol + | Play/Pause |   |      | LFT | DWN |  UP | RGT |     |     |
            // | BTCLR | BT1 | BT2 | BT3 | BT4 | BT5 |   |            |     |     |     |     |     |     |
            //                    |     |     |    |                  |     |     |     |

            bindings = <
&trans  &trans  &trans  &trans  &kp LA(F4)  &trans     &kp PG_UP         &ht LS(HOME) HOME  &kp UP    &ht LS(END) END  &trans  &trans
&trans  &kp F1  &kp F2  &kp F3  &kp F4      &kp F5     &kp PG_DN         &kp LEFT           &kp DOWN  &kp RIGHT        &trans  &trans
&trans  &kp F6  &kp F7  &kp F8  &kp F9      &kp F10    &kp LC(LG(LEFT))  &kp LC(LG(RIGHT))  &trans    &trans           &trans  &trans
                        &trans  &trans      &trans     &trans            &trans             &trans
            >;
        };

        layer_3 {
            bindings = <
&trans      &to 4         &trans        &trans        &trans        &trans          &trans    &trans             &trans           &trans      &trans      &trans
&trans      &trans        &trans        &trans        &trans        &trans          &trans    &trans             &trans           &trans      &trans      &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp C_PP  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_PREV  &kp C_NEXT  &trans
                                        &trans        &trans        &trans          &trans    &trans             &trans
            >;
        };

        genshin {
            bindings = <
&kp TAB    &kp N1  &kp N2  &kp N3  &kp N4   &kp N5       &trans  &trans  &trans  &trans  &trans  &trans
&kp LSHFT  &kp Q   &kp W   &kp E   &kp ESC  &kp T        &trans  &trans  &trans  &trans  &trans  &trans
&kp LCTRL  &kp A   &kp S   &kp D   &kp F    &kp Z        &trans  &trans  &trans  &trans  &trans  &trans
                           &trans  &to 0    &kp SPACE    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        layer3 {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
